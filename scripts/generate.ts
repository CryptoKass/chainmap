import networks from "../data/networks.list.ts";
import { NetworkMap, ChainMap } from "../data/types";
import { getWorkingRPCs } from "./utils";

/** Returns a network map containing only working network RPCs */
const filterWorkingNetworks = async (networks: NetworkMap) => {
  const workingNetworks: NetworkMap = {};

  for (let [networkName, networkMap] of Object.entries(networks)) {
    const chains: ChainMap = {};

    for (let [chainName, chainInfo] of Object.entries(networkMap)) {
      console.log(`Checking RPCs for ${networkName} ${chainName}...`);
      chains[chainName] = {
        ...chainInfo,
        rpc: await getWorkingRPCs(chainInfo.rpc),
      };
    }

    workingNetworks[networkName] = chains;
  }

  return workingNetworks;
};

const generateSource = async (networks: NetworkMap) => {
  let files: Record<string, string> = {};

  // make a file for each network
  for (let [networkName, networkMap] of Object.entries(networks)) {
    let src = `// THIS FILE IS AUTOGENERATED\n// DO NOT EDIT\n\n`;

    for (let [chainName, chainInfo] of Object.entries(networkMap)) {
      src += `\n// ${chainInfo.name.toUpperCase()}\n`;
      src += `const ${chainName}Info = ${JSON.stringify(
        chainInfo,
        null,
        2
      )} \n`;
    }

    src += `\nexport default {`;
    for (let [chainName, chainInfo] of Object.entries(networkMap)) {
      src += `\n  ${chainName}: ${chainName}Info,`;
    }
    src += `\n}\n`;

    files[`${networkName}.ts`] = src;
  }

  // make chainid file
  let chainIdsSrc = `// THIS FILE IS AUTOGENERATED\n// DO NOT EDIT\n\n`;

  chainIdsSrc += `export default {\n`;
  for (let [networkName, networkMap] of Object.entries(networks)) {
    for (let [chainName, chainInfo] of Object.entries(networkMap)) {
      chainIdsSrc += `  ${chainInfo.chainId}: { network: "${networkName}", chain: "${chainName}" },\n`;
    }
  }
  chainIdsSrc += `}\n`;
  files["chainIds.ts"] = chainIdsSrc;

  // make the index file
  let indexSrc = `// THIS FILE IS AUTOGENERATED\n// DO NOT EDIT\n\n`;
  indexSrc += `import { asProxyWithChainId } from "./utils";\n`;
  indexSrc += `import chainIds from "./chainIds";\n`;

  indexSrc += `\n// Supported Networks`;
  for (let [networkName, networkMap] of Object.entries(networks)) {
    indexSrc += `\nimport ${networkName} from "./${networkName}";`;
  }

  indexSrc += `\n\nexport default asProxyWithChainId({`;
  for (let networkName of Object.keys(networks)) {
    indexSrc += `\n  ${networkName},`;
  }
  indexSrc += `\n}, chainIds);\n`;

  files["index.ts"] = indexSrc;
  return files;
};

const main = async () => {
  const workingNetworks = await filterWorkingNetworks(networks);

  const files = await generateSource(workingNetworks);
  for (let [filename, src] of Object.entries(files)) {
    const filepath = `./src/${filename}`;
    await Bun.write(filepath, src);
    console.log(`Wrote ${filepath} ✔️`);
  }

  await Bun.write("./chainmap.json", JSON.stringify(workingNetworks, null, 2));
};

main()
  .then(() => console.log("Done!"))
  .catch((e) => console.error(e))
  .finally(() => process.exit(0));
